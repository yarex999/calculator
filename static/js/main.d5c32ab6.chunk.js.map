{"version":3,"sources":["Previous.js","Current.js","Commands.js","Operators.js","Numbers.js","App.js","reportWebVitals.js","index.js"],"names":["Previous","resultVal","disabled","className","value","Current","currNumVal","parseFloat","Commands","props","buttons","map","elem","onClick","clearAll","uuid","cutCurrentNum","operatorVal","operatorValSet","resultValSet","currNumValSet","prevNumValSet","split","slice","length","join","toString","Operators","computation","useState","prevOperator","setPrevOperator","e","setCalcOp","target","innerHTML","op","console","log","Number","prevNumVal","oldCurrVal","Numbers","setCalcNum","changeSign","num","changedNum","varNum","indexOf","substr","App","operator","setOperator","prevNum","setPrevNum","currNum","setCurrNum","result","setResult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5c32ab6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Previous.css'\r\n\r\nfunction Previous({resultVal}){\r\n\r\n    return (<>\r\n        <input disabled className=\"calc__display-previous\" value={resultVal?resultVal:''} /> \r\n        \r\n        \r\n</>)\r\n}\r\n\r\nexport default Previous","import React from 'react';\r\nimport './Current.css'\r\n\r\n\r\nfunction Current({currNumVal, resultVal}){\r\n    return (<>       \r\n\r\n    <input disabled className=\"calc__display-current\" value={currNumVal? currNumVal: resultVal? parseFloat(resultVal):'0'}/>\r\n    \r\n   \r\n\r\n    </>)\r\n}\r\n\r\nexport default Current","import React from 'react';\r\nimport uuid from 'react-uuid';\r\nimport './Commands.css';\r\n\r\nfunction Commands(props){\r\n\r\n    const buttonsArr=['AC','backspace'];\r\n\r\n    const buttons = buttonsArr.map( elem => {\r\n        switch(elem){\r\n            case 'AC':\r\n             return <button \r\n             className=\"calc__command\" \r\n             key={uuid()}\r\n             onClick={clearAll}\r\n             >\r\n               {elem}\r\n             </button>\r\n            case 'backspace':\r\n             return <button \r\n             className=\"calc__command\" \r\n             key={uuid()}\r\n             onClick={cutCurrentNum}\r\n             >\r\n               {elem}\r\n             </button>\r\n        }\r\n    });\r\n\r\n    // clear calculator\r\n    function clearAll(){\r\n        if(props.operatorVal && props.resultVal || props.currNumVal){\r\n            props.operatorValSet(null);\r\n            props.resultValSet(null);\r\n            props.currNumValSet(null);\r\n            props.prevNumValSet(0);\r\n        }\r\n      }\r\n\r\n    // edit current number\r\n      function cutCurrentNum(){\r\n        if(props.currNumVal){\r\n        props.currNumValSet([props.currNumVal[0].split('').slice(0, props.currNumVal[0].length - 1).join('').toString()])\r\n        }\r\n      }\r\n\r\n    return(\r\n        <div className=\"calc__commands\">\r\n            {buttons}\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Commands;","import React, {useState} from 'react'\r\nimport uuid from 'react-uuid';\r\nimport './Operators.css';\r\n\r\nfunction Operators(props){\r\n\r\n    const[prevOperator, setPrevOperator] = useState('');\r\n    \r\n    let computation; \r\n    const buttonsArr = ['%','-','+','*','/','='];\r\n    const buttons = buttonsArr.map(elem => {\r\n        \r\n        return <button \r\n        className=\"calc__operator\" \r\n        key={uuid()}\r\n        onClick={(e)=>setCalcOp(e.target.innerHTML)}\r\n        >{elem}\r\n        </button>\r\n        \r\n    });\r\n\r\n// calculation functions\r\n\r\n    function setCalcOp(op){\r\n     \r\n        if(op === '%' && (props.resultVal || props.currNumVal)){\r\n             console.log('g')\r\n            computation = Number(`${props.currNumVal ? parseFloat(props.currNumVal) : parseFloat(props.resultVal) }`)/100;\r\n            props.resultValSet(computation);\r\n            props.operatorValSet(null)\r\n          // props.prevNumValSet(computation);\r\n          props.currNumValSet([computation.toString()])\r\n           \r\n        }else if(!props.operatorVal && op != \"%\"){\r\n           props.prevNumValSet(parseFloat(props.currNumVal));\r\n           props.resultValSet(props.currNumVal + op);\r\n           props.operatorValSet(op);\r\n           props.currNumValSet(null)\r\n           \r\n         }else if(op != '=' && props.operatorVal === '=' ){\r\n          props.operatorValSet(op);\r\n         }else if(op == '=' && props.operatorVal === '='){\r\n             props.operatorValSet(prevOperator);\r\n         } else if(props.operatorVal && props.currNumVal) {\r\n           switch(props.operatorVal){\r\n             \r\n            case '+': \r\n             computation = Number(props.prevNumVal) + Number(`${props.currNumVal? props.currNumVal:props.oldCurrVal}`)\r\n             setPrevOperator(props.operatorVal);\r\n             props.operatorValSet(op);\r\n             props.currNumValSet(null)\r\n             break;\r\n             case '-': \r\n             computation = Number(props.prevNumVal) - Number(`${props.currNumVal? props.currNumVal:props.oldCurrVal}`)\r\n             setPrevOperator(props.operatorVal);\r\n             props.operatorValSet(op);\r\n           props.currNumValSet(null)\r\n        \r\n             break;\r\n             case '*': \r\n              computation = Number(props.prevNumVal) * Number(`${props.currNumVal? props.currNumVal:props.oldCurrVal}`)\r\n              setPrevOperator(props.operatorVal);\r\n              props.operatorValSet(op);\r\n           props.currNumValSet(null)\r\n             \r\n             break;\r\n             case '/': \r\n            computation = Number(props.prevNumVal) / Number(`${props.currNumVal? props.currNumVal:props.oldCurrVal}`)\r\n            setPrevOperator(props.operatorVal);\r\n            props.operatorValSet(op);\r\n           props.currNumValSet(null)\r\n             \r\n             break;\r\n             case '=':\r\n               setCalcOp(props.operatorVal);\r\n            break;\r\n            \r\n           }\r\n\r\n           props.resultValSet(computation + op);\r\n           props.prevNumValSet(computation);\r\n           \r\n   \r\n         } else if( op && !props.currNumVal){\r\n            props.prevNumValSet([parseFloat(props.prevNumVal)]);\r\n            props.resultValSet(props.prevNumVal + op);\r\n            props.operatorValSet(op);\r\n            props.currNumValSet(null)\r\n         }\r\n         \r\n         \r\n         \r\n       }\r\n    \r\n\r\n    return(\r\n        <div className=\"calc__operators\">\r\n            {buttons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Operators","import React from 'react';\r\nimport uuid from 'react-uuid';\r\nimport './Numbers.css';\r\n\r\nfunction Numbers({currNumVal, currNumValSet}){\r\n    const buttonsArr = ['1','2','3','4','5','6','7','8','9','+/-', '0', '.' ];\r\n    const buttons = buttonsArr.map(elem => {\r\n        switch(elem){\r\n            case '.':\r\n                return <button\r\n                className=\"calc__number\"  \r\n                key={uuid()}\r\n                onClick={currNumVal?(e)=>setCalcNum(e.target.innerHTML): ()=> console.log('wrong operator') }\r\n                >{elem}\r\n                </button>\r\n            case '+/-':\r\n                return <button\r\n                className=\"calc__number\"  \r\n                key={uuid()}\r\n                onClick={changeSign}\r\n                >{elem}\r\n                </button>\r\n            default:\r\n                return <button\r\n                className=\"calc__number\"  \r\n                key={uuid()}\r\n                onClick={(e)=>setCalcNum(e.target.innerHTML)}\r\n                >{elem}\r\n              </button>   \r\n        }\r\n    });\r\n\r\n// set current number\r\n    function setCalcNum(num){\r\n       \r\n        if(!currNumVal){\r\n        currNumValSet(num);\r\n          console.log(currNumVal)\r\n        } else {\r\n        currNumValSet([currNumVal + num]);\r\n          console.log(currNumVal)\r\n        }\r\n      }\r\n\r\n//  change the sign of the current number ( - ? + : - )\r\n      function changeSign(){\r\n        console.log(currNumVal)\r\n        if(currNumVal){\r\n         let changedNum; \r\n         console.log(currNumVal)\r\n     \r\n         let varNum = currNumVal[0];\r\n         console.log(varNum)\r\n         varNum.indexOf('-') >=0 ? changedNum = varNum.substr(1) : changedNum = '-' + varNum;\r\n         currNumValSet([changedNum]); \r\n          \r\n        }\r\n      }\r\n\r\n\r\n    return (\r\n        <div className=\"calc__numbers\">\r\n            {buttons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Numbers","import React, {useState} from 'react';\nimport Previous from './Previous.js';\nimport Current from './Current.js';\nimport Commands from './Commands.js';\nimport Operators from './Operators.js';\nimport Numbers from './Numbers.js';\nimport './App.css';\n\n\n\nfunction App() {\n\n  // the source of truth\n  const [operator, setOperator] = useState(null);\n  const [prevNum, setPrevNum] = useState(0);\n  const [currNum, setCurrNum] = useState(null);\n  const [result, setResult] = useState(null);\n\n// to check values\n  console.log(\"Previous: \", prevNum);\n  console.log(\"current: \", currNum);\n  console.log(\"operator: \", operator);\n  console.log(\"result: \", result);\n\n\n\n  return (\n    <div className=\"calc\">\n<div className=\"calc__displays\">\n  <Previous resultVal={result} />\n  <Current  currNumVal={currNum} resultVal={result}  />\n</div>\n      \n\n<div className=\"calc__buttons\">\n      <Commands  \n      currNumVal={currNum}\n      currNumValSet={setCurrNum} \n      prevNumVal={prevNum} \n      prevNumValSet={setPrevNum}\n      resultVal={result}\n      resultValSet={setResult}\n      operatorVal={operator}\n      operatorValSet={setOperator}\n      />\n\n      <Operators \n      currNumVal={currNum}\n      currNumValSet={setCurrNum} \n      prevNumVal={prevNum} \n      prevNumValSet={setPrevNum}\n      resultVal={result}\n      resultValSet={setResult}\n      operatorVal={operator}\n      operatorValSet={setOperator}\n      />\n\n      <Numbers \n      currNumVal={currNum}\n      currNumValSet={setCurrNum} \n      />\n</div>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}